directive @uppercase on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Breed {
  id: Int!
  name: String!
  petType: PetType!
  pets: [Pet!]!
}

scalar Date

scalar DateTime

type EmergencyContact {
  name: String!
  phoneNumber: String!
}

input EmergencyContactUpdate {
  name: String!
  phoneNumber: String!
}

enum EnergyLevel {
  HIGH
  LOW
  MEDIUM
}

enum Gender {
  FEMALE
  MALE
}

scalar JSON

type Mutation {
  addPet(input: PetAdd!): MutationResponse
  updatePet(input: PetUpdate!): MutationResponse
  updateUser(input: UserUpdate!): MutationResponse
}

type MutationResponse {
  code: String!
  data: JSON
  message: String
  success: Boolean!
}

type Pet {
  breed: Breed!
  breedId: Int!
  createdAt: DateTime!
  dob: Date
  gender: Gender!
  id: Int!
  name: String!
  petDetails: PetDetails
  petType: PetType!
  photo: String
  updatedAt: DateTime!
  user: User!
  userId: Int!
  weight: Float!
}

input PetAdd {
  ageMonths: Int!
  ageYears: Int!
  breedId: Int!
  gender: Gender!
  name: String!
  petDetails: PetDetailsAdd!
  petType: PetType!
  photo: String
  weight: Float!
}

type PetDetails {
  behavioralTraits: PetDetailsFormat
  createdAt: DateTime!
  dietaryRestrictions: PetDetailsFormat
  energyLevel: PetDetailsFormat!
  feedingSchedule: PetDetailsFormat!
  id: Int!
  pet: Pet!
  petId: Int!
  pottyBreakSchedule: PetDetailsFormat!
  preferredWalkingSchedule: [PetDetailsFormat!]!
  spayedNeutered: PetDetailsFormat!
  specialRequirements: PetDetailsFormat
  updatedAt: DateTime!
  vaccinated: PetDetailsFormat!
}

input PetDetailsAdd {
  behavioralTraits: PetDetailsInputFormat
  dietaryRestrictions: PetDetailsInputFormat
  energyLevel: PetDetailsInputFormat!
  feedingSchedule: PetDetailsInputFormat!
  pottyBreakSchedule: PetDetailsInputFormat!
  preferredWalkingSchedule: [PetDetailsInputFormat!]!
  spayedNeutered: PetDetailsInputFormat!
  specialRequirements: PetDetailsInputFormat
  vaccinated: PetDetailsInputFormat!
}

type PetDetailsFormat {
  additionalDetails: String
  value: String
}

input PetDetailsInputFormat {
  additionalDetails: String
  value: String!
}

enum PetType {
  CAT
  DOG
}

input PetUpdate {
  ageMonths: Int
  ageYears: Int
  breedId: Int
  gender: Gender
  id: Int!
  name: String
  petDetails: PetDetailsAdd
  petType: PetType
  photo: String
  weight: Float
}

type Query {
  getBreeds(petType: PetType): [Breed]
  getPets: [Pet]
  getUser: User
  getUsers: [User]
}

enum Role {
  ADMIN
  OWNER
  WALKER
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

type User {
  city: String
  createdAt: DateTime!
  district: String
  dob: Date
  email: String!
  emergencyContacts: [EmergencyContact!]
  firstName: String!
  id: Int!
  lastName: String
  pets: [Pet!]!
  phoneNumber: String
  profilePhoto: String
  role: Role!
  status: Status!
  street: String
  updatedAt: DateTime!
  zipCode: String
}

input UserUpdate {
  city: String
  district: String
  dob: Date
  emergencyContacts: [EmergencyContactUpdate!]
  firstName: String
  lastName: String
  phoneNumber: String
  profilePhoto: String
  street: String
  zipCode: String
}

enum WalkingSchedule {
  AFTERNOON
  EVENING
  MORNING
  NIGHT
}

enum YesNo {
  NO
  YES
}