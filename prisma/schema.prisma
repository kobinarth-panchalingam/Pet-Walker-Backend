datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id   Int   @id @default(autoincrement())
    Pets Pet[]

    email             String    @unique
    password          String
    firstName         String
    lastName          String?
    phoneNumber       String?   @unique
    dob               DateTime?
    street            String?
    city              String?
    district          String?
    zipCode           String?
    profilePhoto      String?
    emergencyContacts Json[]
    status            Status    @default(PENDING)
    role              Role      @default(OWNER)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Pet {
    id         Int         @id @default(autoincrement())
    userId     Int
    user       User        @relation(fields: [userId], references: [id])
    breedId    Int
    breed      Breed       @relation(fields: [breedId], references: [id])
    PetDetails PetDetails?

    petType PetType   @default(DOG)
    name    String
    dob     DateTime?
    photo   String?
    gender  Gender
    weight  Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Breed {
    id   Int   @id @default(autoincrement())
    Pets Pet[]

    name    String
    petType PetType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PetDetails {
    id    Int @id @default(autoincrement())
    petId Int @unique
    pet   Pet @relation(fields: [petId], references: [id])

    spayedNeutered           Json
    vaccinated               Json
    energyLevel              Json
    preferredWalkingSchedule Json[]
    feedingSchedule          Json
    pottyBreakSchedule       Json
    specialRequirements      Json?
    dietaryRestrictions      Json?
    behavioralTraits         Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Gender {
    MALE
    FEMALE
}

enum PetType {
    DOG
    CAT
}

enum Role {
    ADMIN
    OWNER
    WALKER
}

enum Status {
    PENDING
    APPROVED
    REJECTED
}
